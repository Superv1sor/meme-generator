{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","initialCount","React","useState","count","setCount","increment","useCallback","c","reset","useCounter","element","resetCount","memes","setMemes","topText","setTopText","bottomText","setBottomText","getCount","count2","getCount2","maxLength","useEffect","a","fetch","initialResponse","json","responseToJSON","data","asyncFunction","className","src","alt","style","backgroundImage","url","value","onChange","e","target","type","placeholder","onKeyUp","length","keyhandler","keyhandler2","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAUe,SAASA,IAAO,IAAD,EAP9B,WAAuC,IAAnBC,EAAkB,uDAAH,EAAG,EACVC,IAAMC,SAASF,GADL,mBAC7BG,EAD6B,KACtBC,EADsB,KAE9BC,EAAYJ,IAAMK,aAAY,kBAAMF,GAAS,SAACG,GAAD,OAAOA,EAAI,OAAI,IAElE,MAAO,CAAEJ,QAAOE,YAAWG,MADb,kBAAMJ,EAASJ,KAK4BS,CAAW,GAArDC,EADa,EACpBP,MAAgBE,EADI,EACJA,UAAkBM,EADd,EACOH,MADP,EAEFN,mBAAS,IAFP,mBAErBU,EAFqB,KAEdC,EAFc,OAGEX,mBAAS,IAHX,mBAGrBY,EAHqB,KAGZC,EAHY,OAIQb,mBAAS,IAJjB,mBAIrBc,EAJqB,KAITC,EAJS,OAKJf,mBAAS,GALL,mBAKvBC,EALuB,KAKhBe,EALgB,OAMFhB,mBAAS,GANP,mBAMvBiB,EANuB,KAMfC,EANe,KAOtBC,EAAY,KASlBC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACgCC,MAAM,qCADtC,cACQC,EADR,gBAE+BA,EAAgBC,OAF/C,OAEQC,EAFR,OAGEd,EAASc,EAAeC,KAAKhB,OAH/B,4CADc,uBAAC,WAAD,wBAMdiB,KACC,IAUH,OACE,qBAAKC,UAAU,MAAf,SACGlB,EAAM,GACL,qCACE,qBACEmB,IAAI,6CACJC,IAAI,mBAEN,sBACEF,UAAU,UACVG,MAAO,CACLC,gBAAgB,OAAD,OAAStB,EAAMF,GAASyB,IAAxB,MAHnB,UAME,mBAAGL,UAAU,MAAb,SAAoBhB,IACpB,oBAAGgB,UAAU,SAAb,UAAuBd,EAAvB,UAEF,sBAAKc,UAAU,UAAf,UACE,uBACEM,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAWuB,EAAEC,OAAOH,QACrCI,KAAK,OACLC,YAAY,iBACZpB,UAAWA,EACXqB,QAAS,SAACJ,GAAD,OAhDF,SAACA,GAClBpB,EAASoB,EAAEC,OAAOH,MAAMO,QA+CEC,CAAWN,MAE7B,sBAAKR,UAAU,OAAf,UACG3B,EADH,IACWkB,EADX,iBAIA,uBACEe,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAcqB,EAAEC,OAAOH,QACxCI,KAAK,OACLC,YAAY,oBACZpB,UAAWA,EACXqB,QAAS,SAACJ,GAAD,OAzDD,SAACA,GACnBlB,EAAUkB,EAAEC,OAAOH,MAAMO,QAwDCE,CAAYP,MAE9B,sBAAKR,UAAU,OAAf,UACGX,EADH,IACYE,EADZ,iBAGA,wBAAQyB,QAjDJ,SAACR,GACbvB,EAAW,IACXE,EAAc,IACdC,EAAS,KACTE,EAAU,KACVT,KA4CgC6B,KAAK,QAA7B,mBAGA,wBAAQV,UAAU,OAAOgB,QAASzC,EAAlC,gCAMJ,YC7FR,IAYe0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3D,EAAD,MAEF4D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be045f01.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nfunction useCounter(initialCount = 0) {\n  const [count, setCount] = React.useState(initialCount);\n  const increment = React.useCallback(() => setCount((c) => c + 1), []);\n  const reset = () => setCount(initialCount);\n  return { count, increment, reset };\n}\n\nexport default function App() {\n  const { count: element, increment, reset: resetCount } = useCounter(0);\n  const [memes, setMemes] = useState([]);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  let [count, getCount] = useState(0);\n  let [count2, getCount2] = useState(0);\n  const maxLength = \"40\";\n\n  const keyhandler = (e) => {\n    getCount(e.target.value.length);\n  };\n  const keyhandler2 = (e) => {\n    getCount2(e.target.value.length);\n  };\n\n  useEffect(() => {\n    async function asyncFunction() {\n      const initialResponse = await fetch(\"https://api.imgflip.com/get_memes\");\n      const responseToJSON = await initialResponse.json();\n      setMemes(responseToJSON.data.memes);\n    }\n    asyncFunction();\n  }, []);\n\n  const clear = (e) => {\n    setTopText(\"\");\n    setBottomText(\"\");\n    getCount(\"0\");\n    getCount2(\"0\");\n    resetCount();\n  };\n\n  return (\n    <div className=\"App\">\n      {memes[0] ? (\n        <>\n          <img\n            src=\"https://i.ibb.co/9r8Rcpt/memegenerator.png\"\n            alt=\"Meme-Generator\"\n          />\n          <div\n            className=\"memebox\"\n            style={{\n              backgroundImage: `url(${memes[element].url})`\n            }}\n          >\n            <p className=\"top\">{topText}</p>\n            <p className=\"bottom\">{bottomText} </p>\n          </div>\n          <div className=\"addtext\">\n            <input\n              value={topText}\n              onChange={(e) => setTopText(e.target.value)}\n              type=\"text\"\n              placeholder=\"Enter Top Text\"\n              maxLength={maxLength}\n              onKeyUp={(e) => keyhandler(e)}\n            />\n            <div className=\"keys\">\n              {count}/{maxLength} characters\n            </div>\n\n            <input\n              value={bottomText}\n              onChange={(e) => setBottomText(e.target.value)}\n              type=\"text\"\n              placeholder=\"Enter Bottom Text\"\n              maxLength={maxLength}\n              onKeyUp={(e) => keyhandler2(e)}\n            />\n            <div className=\"keys\">\n              {count2}/{maxLength} characters\n            </div>\n            <button onClick={clear} type=\"reset\">\n              Clear\n            </button>\n            <button className=\"next\" onClick={increment}>\n              Change Image\n            </button>\n          </div>\n        </>\n      ) : (\n        \"loading\"\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}